package affinecipher;

import javax.swing.JOptionPane;

public class AffineCipherFrame extends javax.swing.JFrame {

    private final int m = 26;
    private int x = 0, y = 0, a = 0, b = 0;
    private char character;
    private final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    public AffineCipherFrame() {
        initComponents();
        //Result.disable();
    }

    private boolean GCD(int a, int m) {
        int gcd = 1;
        for (int i = 1; i <= a && i <= m; i++) {
            if (a % i == 0 && m % i == 0) {
                gcd = i;
            }
        }

        return gcd == 1;
    }

    private int get_aInv(int a, int m) {
        int a_inv = 1;
        for (int i = 1; i <= m; i++) {
            a_inv = (a * i) % m;
            if (a_inv == 1) {
                a_inv = i;
                break;
            }
        }
        return a_inv;
    }

    private String Encrypt(String PlainText, int a, int b) {
        String cipherText = "";
        for (int i = 0; i < PlainText.length(); i++) {
            character = PlainText.charAt(i); // get the character in plainText at index i
            x = alphabet.indexOf(character); // get the index of the character in alphabet
            y = (a * x + b) % m; // get the encrypted character index
            character = alphabet.charAt(y); // get the encrypted character
            cipherText += character; // store the charater in the ciphertext
        }
        return cipherText;
    }

    private String Decrypt(String CipherText, int a, int b) {
        String plainText = "";
        int a_Inverse = get_aInv(a, m);
        for (int i = 0; i < CipherText.length(); i++) {
            character = CipherText.charAt(i); // get the character in the cipherText at index i
            y = alphabet.indexOf(character); // get the index of the character in the alphabet
            x = a_Inverse * (y - b) % m; //get the decrypted character index
            if (x < 0) // if the value of x is negative add 26
            {
                x += 26;
            }
            character = alphabet.charAt(x);
            plainText += character;
        }

        return plainText;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        WelcomeLabel = new javax.swing.JLabel();
        plain_CipherText_txt = new javax.swing.JTextField();
        keyBLable = new javax.swing.JLabel();
        KeyALabel = new javax.swing.JLabel();
        keyATxt = new javax.swing.JTextField();
        keyBTxt = new javax.swing.JTextField();
        encryptBtn = new javax.swing.JButton();
        decryptBtn = new javax.swing.JButton();
        Result = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Affine Cipher");

        WelcomeLabel.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        WelcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WelcomeLabel.setText("Welcome to Affine Cipher");

        plain_CipherText_txt.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        plain_CipherText_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        plain_CipherText_txt.setToolTipText("Enter Plain/Cipher Text");
        plain_CipherText_txt.setActionCommand("<Not Set>");
        plain_CipherText_txt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        plain_CipherText_txt.setName(""); // NOI18N

        keyBLable.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        keyBLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        keyBLable.setText("Enter Key (b)");

        KeyALabel.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        KeyALabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        KeyALabel.setText("Enter Key (a)");

        keyATxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        keyBTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        encryptBtn.setText("Encrypt");
        encryptBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        encryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBtnActionPerformed(evt);
            }
        });

        decryptBtn.setText("Decrypt");
        decryptBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        decryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBtnActionPerformed(evt);
            }
        });

        Result.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Result.setToolTipText("Result");
        Result.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        Result.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        Result.setEnabled(false);
        Result.setSelectionEnd(200);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(encryptBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(decryptBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(188, 188, 188))
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(WelcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(187, 187, 187))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(KeyALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(keyATxt)
                                .addGap(22, 22, 22)))
                        .addGap(198, 198, 198)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyBLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(keyBTxt)
                                .addGap(22, 22, 22)))
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plain_CipherText_txt)
                            .addComponent(Result))
                        .addGap(55, 55, 55))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(WelcomeLabel)
                .addGap(18, 18, 18)
                .addComponent(plain_CipherText_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyALabel)
                    .addComponent(keyBLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyATxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(Result, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        plain_CipherText_txt.getAccessibleContext().setAccessibleName("");
        plain_CipherText_txt.getAccessibleContext().setAccessibleDescription("Enter cipher");
        Result.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBtnActionPerformed
        String plainText = "";
        boolean check = true;
        plainText = plain_CipherText_txt.getText().toUpperCase().replace(" ", "");
        a = Integer.parseInt(keyATxt.getText().trim());
        b = Integer.parseInt(keyBTxt.getText().trim());

        if (!plainText.matches("[A-Z]+")) {
            JOptionPane.showMessageDialog(this,
                    "Please enter characters only",
                    "Error Message",
                    JOptionPane.ERROR_MESSAGE);
            check = false;
        }
        if (a < 1 || b < 1) {
            JOptionPane.showMessageDialog(this,
                    "Please enter an integer number",
                    "Error Message",
                    JOptionPane.ERROR_MESSAGE);
            check = false;
        }
        if (check) {
            if (GCD(a, m)) {
                String cipherText = Encrypt(plainText, a, b);
                Result.setText(cipherText);
            } else {
                JOptionPane.showMessageDialog(this,
                        "The key GCD for a and m is not equal to 1. Plese try another number", // Message to be shown
                        "Error Message", // title bar
                        JOptionPane.ERROR_MESSAGE); // Icon
            }
        }

    }//GEN-LAST:event_encryptBtnActionPerformed

    private void decryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBtnActionPerformed
        String cipherText = "";
        boolean check = true;
        try {
            cipherText = plain_CipherText_txt.getText().toUpperCase().replace(" ", "");

            a = Integer.parseInt(keyATxt.getText().trim());
            b = Integer.parseInt(keyBTxt.getText().trim());
            if (!cipherText.matches("[A-Z]+")) {
                JOptionPane.showMessageDialog(this,
                        "Please enter characters only",
                        "Error Message",
                        JOptionPane.ERROR_MESSAGE);
                check = false;
            }
            if (a < 1 || b < 1) {
                JOptionPane.showMessageDialog(this,
                        "Please enter an integer number",
                        "Error Message",
                        JOptionPane.ERROR_MESSAGE);
                check = false;
            }
            if (check) {
                if (GCD(a, m)) {
                    String plainText = Decrypt(cipherText, a, b);
                    Result.setText(plainText);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "The key a does not have an inverse.", // Message to be shown
                            "Error Message", // title bar
                            JOptionPane.ERROR_MESSAGE); // Icon
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Please enter an integer number",
                    "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        } catch (StringIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this,
                    "Please enter characters only",
                    "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_decryptBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AffineCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AffineCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AffineCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AffineCipherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AffineCipherFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel KeyALabel;
    private javax.swing.JFormattedTextField Result;
    private javax.swing.JLabel WelcomeLabel;
    private javax.swing.JButton decryptBtn;
    private javax.swing.JButton encryptBtn;
    private javax.swing.JTextField keyATxt;
    private javax.swing.JLabel keyBLable;
    private javax.swing.JTextField keyBTxt;
    private javax.swing.JTextField plain_CipherText_txt;
    // End of variables declaration//GEN-END:variables
}
